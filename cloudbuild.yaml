 steps:

#loguearse en dockerHub
 - name: 'gcr.io/cloud-builders/docker'
   entrypoint: 'bash'
   args: ['-c', 'docker login --username=$$USERNAME --password=$$PASSWORD']
   secretEnv: ['USERNAME', 'PASSWORD']

#compilar la imagen
# - name: 'gcr.io/cloud-builders/docker'
#   entrypoint: 'bash'
#   args: ['-c', 'docker build -t $$USERNAME/$_REPOSITORY:$_TAG .']
#   secretEnv: ['USERNAME']

#copiarla en dockerHub
# - name: 'gcr.io/cloud-builders/docker'
#   entrypoint: 'bash'
#   args: ['-c', 'docker push $$USERNAME/$_REPOSITORY:$_TAG']
#   secretEnv: ['USERNAME']

#Desplegar ccanalizacion en cloudDeploy
 - name: 'gcr.io/cloud-builders/gcloud'
   entrypoint: 'bash'
   args: ['-c', 'gcloud deploy apply --file=clouddeploy.yaml --region=$_REGION --project=$PROJECT_ID']

#Crear versiones para el despliegue
 - name: 'gcr.io/cloud-builders/gcloud'
   entrypoint: 'bash'
   args: ['-c', 'gcloud deploy releases create abcjobsweb-$SHORT_SHA --project=$PROJECT_ID --region=$_REGION --delivery-pipeline=deploy-abcjobs-web â€“-images=abcjobsweb=docker.io/$$USERNAME/$_REPOSITORY:$_TAG']
   secretEnv: ['USERNAME']

#Re-escribir politica para acceso publico
 - name: 'gcr.io/cloud-builders/gcloud'
   entrypoint: 'bash'
   args: ['-c', 'gcloud run services set-iam-policy deploy-qs-development policy.yaml --project=$PROJECT_ID --region=$_REGION --quiet']

 substitutions:
     _REPOSITORY_1: abcjobs
     _TAG_1: latest
 availableSecrets:
   secretManager:
  # - versionName: projects/proyecto1-399312/secrets/dockerhub-password/versions/1
   - versionName: projects/$PROJECT_ID/secrets/dockerhub-password/versions/1
     env: 'PASSWORD'
   #- versionName: projects/proyecto1-399312/secrets/dockerhub-username/versions/1
   - versionName: projects/$PROJECT_ID/secrets/dockerhub-username/versions/1
     env: 'USERNAME'
